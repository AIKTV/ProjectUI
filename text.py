# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AIKTVUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QIcon
from PyQt5.QtMultimedia import QMediaPlaylist, QMediaPlayer, QMediaContent
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(932, 674)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/7.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setMinimumSize(QtCore.QSize(800, 450))
        MainWindow.setMaximumSize(QtCore.QSize(1600, 900))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.configWidget = QtWidgets.QWidget(self.centralwidget)
        self.configWidget.setMinimumSize(QtCore.QSize(191, 181))
        self.configWidget.setMaximumSize(QtCore.QSize(401, 221))
        self.configWidget.setObjectName("configWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.configWidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.chooseRecordGroupBox = QtWidgets.QGroupBox(self.configWidget)
        self.chooseRecordGroupBox.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.chooseRecordGroupBox.setObjectName("chooseRecordGroupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.chooseRecordGroupBox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.chooseRecord = QtWidgets.QPushButton(self.chooseRecordGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.chooseRecord.sizePolicy().hasHeightForWidth())
        self.chooseRecord.setSizePolicy(sizePolicy)
        self.chooseRecord.setMaximumSize(QtCore.QSize(75, 23))
        self.chooseRecord.setObjectName("chooseRecord")
        self.horizontalLayout_2.addWidget(self.chooseRecord)
        self.recordAddress = QtWidgets.QLineEdit(self.chooseRecordGroupBox)
        self.recordAddress.setObjectName("recordAddress")
        self.horizontalLayout_2.addWidget(self.recordAddress)
        self.verticalLayout_2.addWidget(self.chooseRecordGroupBox)
        self.chooseHandledGroupBox = QtWidgets.QGroupBox(self.configWidget)
        self.chooseHandledGroupBox.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.chooseHandledGroupBox.setObjectName("chooseHandledGroupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.chooseHandledGroupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.chooseHandled = QtWidgets.QPushButton(self.chooseHandledGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.chooseHandled.sizePolicy().hasHeightForWidth())
        self.chooseHandled.setSizePolicy(sizePolicy)
        self.chooseHandled.setMaximumSize(QtCore.QSize(75, 23))
        self.chooseHandled.setObjectName("chooseHandled")
        self.horizontalLayout.addWidget(self.chooseHandled)
        self.handledAddress = QtWidgets.QLineEdit(self.chooseHandledGroupBox)
        self.handledAddress.setObjectName("handledAddress")
        self.horizontalLayout.addWidget(self.handledAddress)
        self.verticalLayout_2.addWidget(self.chooseHandledGroupBox)
        self.frame = QtWidgets.QFrame(self.configWidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2.addWidget(self.frame)
        self.configButton = QtWidgets.QPushButton(self.configWidget)
        self.configButton.setObjectName("configButton")
        self.verticalLayout_2.addWidget(self.configButton)
        self.gridLayout_2.addWidget(self.configWidget, 0, 0, 1, 1)
        self.recordWidget = QtWidgets.QWidget(self.centralwidget)
        self.recordWidget.setObjectName("recordWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.recordWidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.recordTimeDisplay = QtWidgets.QLabel(self.recordWidget)
        self.recordTimeDisplay.setObjectName("recordTimeDisplay")
        self.verticalLayout.addWidget(self.recordTimeDisplay)
        self.recordButtonWidget = QtWidgets.QWidget(self.recordWidget)
        self.recordButtonWidget.setObjectName("recordButtonWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.recordButtonWidget)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.recordButton = QtWidgets.QPushButton(self.recordButtonWidget)
        self.recordButton.setObjectName("recordButton")
        self.horizontalLayout_3.addWidget(self.recordButton)
        self.pauseRecordButton = QtWidgets.QPushButton(self.recordButtonWidget)
        self.pauseRecordButton.setObjectName("pauseRecordButton")
        self.horizontalLayout_3.addWidget(self.pauseRecordButton)
        self.verticalLayout.addWidget(self.recordButtonWidget)
        self.recordOutputDisplay = QtWidgets.QLabel(self.recordWidget)
        self.recordOutputDisplay.setText("")
        self.recordOutputDisplay.setObjectName("recordOutputDisplay")
        self.verticalLayout.addWidget(self.recordOutputDisplay)
        self.gridLayout_2.addWidget(self.recordWidget, 0, 1, 1, 1)
        self.playWidget = QtWidgets.QWidget(self.centralwidget)
        self.playWidget.setObjectName("playWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.playWidget)
        self.gridLayout.setObjectName("gridLayout")
        self.recordPlayBox = QtWidgets.QGroupBox(self.playWidget)
        self.recordPlayBox.setAlignment(QtCore.Qt.AlignCenter)
        self.recordPlayBox.setObjectName("recordPlayBox")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.recordPlayBox)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.recordPlayButton = QtWidgets.QPushButton(self.recordPlayBox)
        self.recordPlayButton.setObjectName("recordPlayButton")
        self.horizontalLayout_4.addWidget(self.recordPlayButton)
        self.recordStopButton = QtWidgets.QPushButton(self.recordPlayBox)
        self.recordStopButton.setObjectName("recordStopButton")
        self.horizontalLayout_4.addWidget(self.recordStopButton)
        self.gridLayout.addWidget(self.recordPlayBox, 0, 0, 1, 1)
        self.handledPlayBox = QtWidgets.QGroupBox(self.playWidget)
        self.handledPlayBox.setAlignment(QtCore.Qt.AlignCenter)
        self.handledPlayBox.setObjectName("handledPlayBox")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.handledPlayBox)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.handledPlayButton = QtWidgets.QPushButton(self.handledPlayBox)
        self.handledPlayButton.setObjectName("handledPlayButton")
        self.horizontalLayout_5.addWidget(self.handledPlayButton)
        self.handledStopButton = QtWidgets.QPushButton(self.handledPlayBox)
        self.handledStopButton.setObjectName("handledStopButton")
        self.horizontalLayout_5.addWidget(self.handledStopButton)
        self.gridLayout.addWidget(self.handledPlayBox, 0, 1, 1, 1)
        self.playFrame = QtWidgets.QFrame(self.playWidget)
        self.playFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.playFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.playFrame.setObjectName("playFrame")

        self.time_lbl = QtWidgets.QLabel(self.playFrame)
        self.time_lbl.setGeometry(QtCore.QRect(390, 110, 90, 18))
        font = QtGui.QFont()
        font.setFamily("仿宋")
        self.time_lbl.setFont(font)
        self.time_lbl.setObjectName("time_lbl")

        self.time_lbl_2 = QtWidgets.QLabel(self.playFrame)
        self.time_lbl_2.setGeometry(QtCore.QRect(480, 110, 90, 18))
        font = QtGui.QFont()
        font.setFamily("仿宋")
        self.time_lbl_2.setFont(font)
        self.time_lbl_2.setObjectName("time_lbl_2")

        self.time_slider = QtWidgets.QSlider(self.playFrame)
        self.time_slider.setGeometry(QtCore.QRect(170, 70, 571, 22))
        self.time_slider.setOrientation(QtCore.Qt.Horizontal)
        self.time_slider.setObjectName("time_slider")

        self.play_btn = QtWidgets.QPushButton(self.playFrame)
        self.play_btn.setEnabled(True)
        self.play_btn.setGeometry(QtCore.QRect(50, 70, 93, 28))
        font = QtGui.QFont()
        font.setFamily("仿宋")
        self.play_btn.setFont(font)
        self.play_btn.setMouseTracking(False)
        self.play_btn.setTabletTracking(False)
        self.play_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/1.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.play_btn.setIcon(icon1)
        self.play_btn.setIconSize(QtCore.QSize(70, 150))
        self.play_btn.setObjectName("play_btn")

        self.mode_btn = QtWidgets.QPushButton(self.playFrame)
        self.mode_btn.setGeometry(QtCore.QRect(770, 70, 93, 28))
        font = QtGui.QFont()
        font.setFamily("仿宋")
        self.mode_btn.setFont(font)
        self.mode_btn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/4.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.mode_btn.setIcon(icon2)
        self.mode_btn.setIconSize(QtCore.QSize(130, 130))
        self.mode_btn.setObjectName("mode_btn")

        self.gridLayout.addWidget(self.playFrame, 1, 0, 1, 2)
        self.gridLayout_2.addWidget(self.playWidget, 1, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.myWindowInit()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.chooseRecordGroupBox.setTitle(_translate("MainWindow", "选择录音/原始音频文件"))
        self.chooseRecord.setText(_translate("MainWindow", "选择文件"))
        self.chooseHandledGroupBox.setTitle(_translate("MainWindow", "选择处理后音频文件"))
        self.chooseHandled.setText(_translate("MainWindow", "选择文件"))
        self.configButton.setText(_translate("MainWindow", "AI模型配置"))
        self.recordTimeDisplay.setText(_translate("MainWindow", "录音时长：你还没有开始录音哦"))
        self.recordButton.setText(_translate("MainWindow", "开始"))
        self.pauseRecordButton.setText(_translate("MainWindow", "暂停"))
        self.recordPlayBox.setTitle(_translate("MainWindow", "原始音频"))
        self.recordPlayButton.setText(_translate("MainWindow", "播放"))
        self.recordStopButton.setText(_translate("MainWindow", "停止"))
        self.handledPlayBox.setTitle(_translate("MainWindow", "处理后音频"))
        self.handledPlayButton.setText(_translate("MainWindow", "播放"))
        self.handledStopButton.setText(_translate("MainWindow", "停止"))

        self.play_btn.setText(_translate("MainWindow", "PushButton"))
        self.mode_btn.setText(_translate("MainWindow", "PushButton"))
        self.time_lbl.setText(_translate("MainWindow", "00:00/00:00"))

    def myWindowInit(self):
        # 创建播放列表对象（窗体属性）
        self.playList = QMediaPlaylist()
        # 初始化播放列表对象的播放模式Loop(顺序播放）
        self.playList.setPlaybackMode(QMediaPlaylist.Loop)
        # 创建播放器对象（窗体属性）
        self.player = QMediaPlayer()
        # 初始化播放器的播放音量最大
        self.player.setVolume(100)
        # 设置播放器的播放列表
        self.player.setPlaylist(self.playList)
        # 创建列表对像（窗体属性）
        self.musicNames = []
        # 设置按钮的提示信息
        self.play_btn.setToolTip("播放")
        self.mode_btn.setToolTip("顺序播放")
        # 给播放按钮的单击信号（clicke)调用函数musicPlay
        self.play_btn.clicked.connect(self.musicPlay)
        # 给播放器的播放音频持续时长改变信号（durationChang)调用getTotalTime
        self.player.durationChanged.connect(self.getTotalTime)
        # 给播放器的当前播放位置更改信号（positionChanged)调用getCurrentTime
        self.player.positionChanged.connect(self.getCurrentTime)
        # 给时间进度条的拖拽移动（sliderMoved)调用自主定义函数timeChanfed
        self.time_slider.sliderMoved.connect(self.timeChanged)
        # 给模式按钮点击（clicked信号）调用自定义函数modeChanged
        self.mode_btn.clicked.connect(self.modeChanged)

    def modeChanged(self):
        # 判断播放列表的播放模式是否是顺序播放
        if self.playList.playbackMode() == QMediaPlaylist.Loop:
            # 1)更改播放列表当前播放模式为单曲循环
            self.playList.setPlaybackMode(QMediaPlaylist.CurrentItemInLoop)
            # 2)更改模式按钮的图片为单曲循环图片
            self.mode_btn.setIcon(QIcon("images/3.ico"))
            # 3)更改模式按钮提示信息
            self.mode_btn.setToolTip("单曲循环")
            # 否则单曲循环
        else:
            # 1)更改播放列表当前播放模式为顺序播放
            self.playList.setPlaybackMode(QMediaPlaylist.Loop)
            # 2)更改模式按钮的图片为顺序图片
            self.mode_btn.setIcon(QIcon("images/4.ico"))
            # 3)更改模式按钮提示信息
            self.mode_btn.setToolTip("顺序播放")

    # 自定义函数，获取播放音频的总时长,参数d保存的音频的总时长 （毫秒）
    def getTotalTime(self, d):
        # .设置时间进度条的进度值和正在播放的音频总时长一致
        self.time_slider.setRange(0, d)

        seconds = int(d / 1000)
        # 获取时长的分钟
        minutes = int(seconds / 60)
        seconds = seconds - -minutes * 60
        str_time1 = ""
        if minutes < 10:
            str_time1 = str_time1 + "0" + str(minutes)
        else:
            str_time1 = str_time1 + str(minutes)
        str_time1 = str_time1 + ":"
        if seconds < 10:
            str_time1 = str_time1 + "0" + str(seconds)
        else:
            str_time1 = str_time1 + str(seconds)

        # 把分钟和秒设置在时间标签中显示
        b = str_time1
        self.time_lbl_2.setText(f"{b}")

        # 获取当前播放列表
        index = self.playList.currentIndex()
        # 设置窗体标题显示播放音频名称
        MainWindow.setWindowTitle(f"AI--{self.musicNames[index]}")


    # 自定义函数，获取播放音频的当前时长，参数p保存的是音频当前时长（毫秒）
    def getCurrentTime(self, p):
        # 设置时长进度条的当前进度
        self.time_slider.setValue(p)
        # 获取时长的秒
        seconds = int(p / 1000)
        # 获取时长的分钟
        minutes = int(seconds / 60)
        seconds = seconds - -minutes * 60
        str_time = ""
        if minutes < 10:
            str_time = str_time + "0" + str(minutes)
        else:
            str_time = str_time + str(minutes)
        str_time = str_time + ":"
        if seconds < 10:
            str_time = str_time + "0" + str(seconds)
        else:
            str_time = str_time + str(seconds)

        # 把分钟和秒设置在时间标签中显示
        a = str_time + "    /"
        self.time_lbl.setText(f"{a}")

    # 自定义函数，更改当前播放位置
    def timeChanged(self, t):
        # 设置播放器的当前位置为进度条的当前进度
        self.player.setPosition(t)

    # 自定义播放函数
    def musicPlay(self):
        # 判断播放器是否是播放状态
        if self.player.state() == QMediaPlayer.State.PlayingState:
            # 更改播放器为暂停状态
            self.player.pause()
            # 更改播放按钮的图片为暂停图片
            self.play_btn.setIcon(QIcon("images/1.ico"))
            # 更改播放按钮的提示信息为“播放”
            self.play_btn.setToolTip("播放")

        # 判断播放器是否是暂停状态
        elif self.player.state() == QMediaPlayer.State.PausedState:
            # 更改播放器为播放状态
            self.player.play()
            # 更改播放按钮的图片为播放图片
            self.play_btn.setIcon(QIcon("images/2.ico"))
            # 更改播放按钮的提示信息为“暂停”
            self.play_btn.setToolTip("暂停")
        # 否则（停止状态）
        else:
            # 获取本地音频文件
            fileNames, typeName = QFileDialog.getOpenFileNames(None, "选择音乐", 'D:/ai', "*")
            # 循环音频文件的列表
            for i in fileNames:
                # 把音频文件加载到播放列表对象中
                self.playList.addMedia(QMediaContent(QUrl.fromLocalFile(i)))
                # 获取音频文件路径最后一个“/"字符的位置
                start = i.rfind('/')
                end = i.rfind('.')
                # 获取音频文件中文件名称，追加到列表对象中
                self.musicNames.append(i[start + 1:end])
            # 设置当前播放列表的播放音频索引
            self.playList.setCurrentIndex(0)
            # 开始播放
            self.player.play()
            # 更改播放按钮的图片为暂停图片
            self.play_btn.setIcon(QIcon("images/2.ico"))
            # 更改播放按钮的提示信息为“暂停”
            self.play_btn.setToolTip("暂停")
            # 设置窗体标题显示当前播放名称
            MainWindow.setWindowTitle(f"我的音乐酷--{self.musicNames[0]}")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())